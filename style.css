*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    font-family: 'Raleway', sans-serif;
}

/* Header  */


.grid{
    display: grid;
    grid-template-columns: repeat(12,1fr);
    width: 90%;
    max-width: 1100px;
    height: 100%;
    margin: auto;
    gap: 10px;
    overflow: hidden;
    align-items: center;
}   

.weight-400{
    font-weight: 400;
}

.weight-600{
    font-weight: 600;
}

.parrafo{
    margin-bottom: 20px;
}

header{
    height: 500px;
}

.img-hero{  
    width: 100%;
    height: auto;
    grid-column: 7 / 13;

}

.img{
    width: 95%;
    max-width: 400px;
}

.textos-hero{
    grid-column: 1 / 7;
    padding-right: 20px;
}

.textos-hero p{
    text-align: justify;
}

.cta{
    width: 130px;
    background: black;
    color: white;
    text-decoration: none;
    padding: 10px;
    border-radius: 5px;
    text-align: center;
}

.cta:hover{
    background: rgb(4, 211, 4);
    color: rgb(255, 255, 255);
    transition: 0.3s;
}


/*  Services  */


.services{
    height: 370px;
    background: linear-gradient(180deg, white 50%, black 50%);
}

.items{
    grid-column: 1 / -1;
    display: flex; /*con flexbox puedo alinear un elemento de bloque como en el caso de este div*/
    width: 100%; /**con un widht y height de 100% puedo usar las propiedades de flexbox display:Flex  y align-items*/
    height: 100%;
    justify-content: space-evenly; /*distribuye el espacio de manera uniforme*/
    align-items: center;
    flex-wrap: wrap; /*dice que si los elementos hijos sobrepasan el contenedor, que se pongan abajo*/
    
}

.item{
    background: white;
    width: 30%; /*los elementos hijos item se mantienen alineados porque ninguno supera los 30px de tama√±o.. si fuesen mas grandes actuaria
                 la propiedad wrap y uno de los tres item se posicionaria abajo*/
    box-shadow: 0 0 6px rgb(100, 100, 100); /*con 0 0 hago que las sombras aparezcan en todas las caras del elemento*/ 
    overflow: hidden; /*para recortar todo lo que sobresalga del elemento*/  
    height: 220px;
    padding: 20px 10px;
    text-align:center;
}

[class^="far fa"]{ /*esto es un selector de atributos y me permite editar a todos los elementos que tengan el atributo class y dentro la clase far y despues la clase fa*/
    font-size: 50px;
    text-align: center;
}

[class^="fab fa"]{ /*esto es un selector de atributos y me permite editar a todos los elementos que tengan el atributo class y dentro la clase fab y despues la clase fa*/
    font-size: 50px;
    text-align: center;
}

.titulo-services{
    margin:20px;
}


/*  About us  */

.about-us{
    background: black;
    color: white;
    height: auto;
    padding-bottom: 60px;
}

.textos-about-us{
    grid-column: 1/-1;
    text-align: center;
}

.textos-about-us .parrafo{
    color: #ccc;
    margin-top: 20px;
}

.numbers{
    grid-column: 1/-1;
    display: flex;
    justify-content: space-evenly; /**distribuye el espacio entre los elementos de manera uniforme o sea evenly. Podria haber
    generado un efecto similar colocando un grid colum con un span de 3 a cada elemento pero asi esta bien*/ 
    flex-wrap: wrap; /*para que si salen del elemento contenedor, se pongan uno abajo del otro*/
}

.number{
    text-align: center;
    font-size: 30px;
    width: 22%;
}


/*  Mission  */

.mission{
    padding:80px 0;
}

.textos-mission{
    grid-column: 7/13;
    grid-row: 1 / -1;
    margin-bottom:20px;
    text-align: center;
}

.img-mission{
    grid-column: 1 / 7;
     width: 100%;
    height: auto;
    grid-row: 1 / -1; /*pongo -1 porque me aseguro de que en caso de que se creen nuevas rows adicionales, el texto y la imagen siempre abarquen del 1 al -1*/
}



/*  footer  */

footer{
    background: black;
    color: white;
    text-align: center;
    padding:20px;
}

.textos-footer{
    grid-column: 1/-1;
    margin-bottom: 30px;
}

[class^="footer-item"] {
   grid-column: span 3; /*de esta forma distribuyo los enlaces automaticamente y de forma separada por 3 columnas. Queda genial para alinearlos*/
}


[class^="footer-item"] a{
    color: white;
    text-align: center;
}


.fa-facebook-square{
    font-size: 35px;
}


.fa-instagram{
    font-size: 35px;
}


.fa-linkedin{
    font-size: 35px;
}

.fa-github{
    font-size: 35px;
}


/*  Responsive Design  800px */


@media screen and (max-width:800px){
    .header{
        height: auto;
    }

    .grid{
        gap: 30px;
    }

    .img{
        max-width: 260px;
    }

    .img-hero, .textos-hero{
        grid-column: 1/-1; /*esto mueve a textos-hero y img-hero uno abajo del otro porque al ocupar las 12 columnas cada uno, se enciman*/
        text-align: center; /*para centrarlos*/
        margin-top: 40px;
    }

    .services{
        height: auto;
        margin-top: 40px;
    }

    .item{
        width: 60%;
        height: auto;
        margin:40px 0;
        padding:40px;
    }

    .img-mission{
        grid-column: 1/-1;
        grid-row: 2/3;
        text-align: center;
    }

    .textos-mission{
        grid-column: 1/-1;
        grid-row: 1/2;
    }
}


/*Responsive design 400px*/

@media screen and (max-width:400px){
    .img{
        max-width: 190px;
    }

    .grid{
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); /*auto-fit es para que la grid de ajuste lo mas posible y para el min le pongo valor 180px y al max 1fr y esto crea una sola columna*/
    }

    .item{
        width: 90%;
    }

    .number{
        width:55% ;
        border-bottom: 1px dotted white; /*dotted es para que aparezcan unas lineas punteadas debajo de los numbers*/
        margin-bottom: 20px;
        padding-bottom: 5px;
    }

    .textos-mission h3 {
        margin:15px;
    }

    [class^="footer-item"] {
       grid-column: span 1/-1; /*de esta forma distribuyo los enlaces automaticamente y de forma separada por 3 columnas. Queda genial para alinearlos*/
    } 



/*Responsive design 300px*/


@media screen and (max-width:300px){
    .img{
        max-width: 140px;
    }
}